// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Account {
  id                    String                 @id @default(uuid()) @postgresql.Uuid
  name                  String                 @default("")
  type                  AccountTypeType
  mainOffice            Address?               @relation("Account_mainOffice", fields: [mainOfficeId], references: [id])
  mainOfficeId          String?                @map("mainOffice") @postgresql.Uuid
  billingOffice         Address?               @relation("Account_billingOffice", fields: [billingOfficeId], references: [id])
  billingOfficeId       String?                @map("billingOffice") @postgresql.Uuid
  parentAccount         Account?               @relation("Account_parentAccount", fields: [parentAccountId], references: [id])
  parentAccountId       String?                @map("parentAccount") @postgresql.Uuid
  childAccounts         Account[]              @relation("Account_parentAccount")
  installerApplications InstallerApplication[] @relation("InstallerApplication_account")
  insurances            Insurance[]            @relation("Insurance_account")
  stateLicenses         StateLicense[]         @relation("StateLicense_account")
  size                  AccountSizeType?
  operatingStates       Json                   @default("[]")
  externalId            String?
  accountManagerName    String                 @default("")
  accountManagerEmail   String                 @default("")
  leadSource            AccountLeadSourceType?
  createdAt             DateTime?              @default(now())
  updatedAt             DateTime?              @updatedAt
  createdBy             User?                  @relation("Account_createdBy", fields: [createdById], references: [id])
  createdById           String?                @map("createdBy") @postgresql.Uuid
  updatedBy             User?                  @relation("Account_updatedBy", fields: [updatedById], references: [id])
  updatedById           String?                @map("updatedBy") @postgresql.Uuid

  @@index([mainOfficeId])
  @@index([billingOfficeId])
  @@index([parentAccountId])
  @@index([createdById])
  @@index([updatedById])
}

model Address {
  id                                       String                    @id @default(uuid()) @postgresql.Uuid
  street1                                  String                    @default("")
  street2                                  String                    @default("")
  city                                     String                    @default("")
  state                                    AddressStateType
  zipCode                                  String                    @default("")
  createdAt                                DateTime?                 @default(now())
  updatedAt                                DateTime?                 @updatedAt
  createdBy                                User?                     @relation("Address_createdBy", fields: [createdById], references: [id])
  createdById                              String?                   @map("createdBy") @postgresql.Uuid
  updatedBy                                User?                     @relation("Address_updatedBy", fields: [updatedById], references: [id])
  updatedById                              String?                   @map("updatedBy") @postgresql.Uuid
  from_Account_mainOffice                  Account[]                 @relation("Account_mainOffice")
  from_Account_billingOffice               Account[]                 @relation("Account_billingOffice")
  from_Agreement_noticesAddress            Agreement[]               @relation("Agreement_noticesAddress")
  from_ApplicationCompany_address          ApplicationCompany[]      @relation("ApplicationCompany_address")
  from_CreditAuthorizationForm_homeAddress CreditAuthorizationForm[] @relation("CreditAuthorizationForm_homeAddress")

  @@index([createdById])
  @@index([updatedById])
}

model Attachment {
  id                               String                       @id @default(uuid()) @postgresql.Uuid
  name                             String                       @default("")
  disbursement                     Disbursement?                @relation("Attachment_disbursement", fields: [disbursementId], references: [id])
  disbursementId                   String?                      @map("disbursement") @postgresql.Uuid
  file_filename                    String?
  file_filesize                    Int?
  file_mimetype                    String?
  financialStatement               FinancialStatement?          @relation("Attachment_financialStatement", fields: [financialStatementId], references: [id])
  financialStatementId             String?                      @map("financialStatement") @postgresql.Uuid
  installerApplication             InstallerApplication?        @relation("Attachment_installerApplication", fields: [installerApplicationId], references: [id])
  installerApplicationId           String?                      @map("installerApplication") @postgresql.Uuid
  insurance                        Insurance?                   @relation("Attachment_insurance", fields: [insuranceId], references: [id])
  insuranceId                      String?                      @map("insurance") @postgresql.Uuid
  attachmentOptimizationJob        AttachmentOptimizationJob?   @relation("Attachment_attachmentOptimizationJob", fields: [attachmentOptimizationJobId], references: [id])
  attachmentOptimizationJobId      String?                      @unique @map("attachmentOptimizationJob") @postgresql.Uuid
  lender                           Lender?                      @relation("Attachment_lender", fields: [lenderId], references: [id])
  lenderId                         String?                      @map("lender") @postgresql.Uuid
  personalCreditChecks             PersonalCreditCheck?         @relation("Attachment_personalCreditChecks", fields: [personalCreditChecksId], references: [id])
  personalCreditChecksId           String?                      @map("personalCreditChecks") @postgresql.Uuid
  stateLicense                     StateLicense?                @relation("Attachment_stateLicense", fields: [stateLicenseId], references: [id])
  stateLicenseId                   String?                      @map("stateLicense") @postgresql.Uuid
  installerApplicationUser         InstallerApplicationUser?    @relation("Attachment_installerApplicationUser", fields: [installerApplicationUserId], references: [id])
  installerApplicationUserId       String?                      @map("installerApplicationUser") @postgresql.Uuid
  message                          Message?                     @relation("Attachment_message", fields: [messageId], references: [id])
  messageId                        String?                      @map("message") @postgresql.Uuid
  tag                              Json                         @default("[]")
  invalidatedAt                    DateTime?
  attachmentType                   AttachmentAttachmentTypeType
  createdAt                        DateTime?                    @default(now())
  updatedAt                        DateTime?                    @updatedAt
  createdBy                        User?                        @relation("Attachment_createdBy", fields: [createdById], references: [id])
  createdById                      String?                      @map("createdBy") @postgresql.Uuid
  updatedBy                        User?                        @relation("Attachment_updatedBy", fields: [updatedById], references: [id])
  updatedById                      String?                      @map("updatedBy") @postgresql.Uuid
  from_SigningDocument_certificate SigningDocument[]            @relation("SigningDocument_certificate")
  from_SigningDocument_documentPdf SigningDocument[]            @relation("SigningDocument_documentPdf")

  @@index([disbursementId])
  @@index([financialStatementId])
  @@index([installerApplicationId])
  @@index([insuranceId])
  @@index([lenderId])
  @@index([personalCreditChecksId])
  @@index([stateLicenseId])
  @@index([installerApplicationUserId])
  @@index([messageId])
  @@index([createdById])
  @@index([updatedById])
}

model AttachmentOptimizationJob {
  id          String                               @id @default(uuid()) @postgresql.Uuid
  attachment  Attachment?                          @relation("Attachment_attachmentOptimizationJob")
  remoteJobId String                               @default("")
  jobType     AttachmentOptimizationJobJobTypeType
  status      AttachmentOptimizationJobStatusType
  result      String                               @default("")
  createdAt   DateTime?                            @default(now())
  updatedAt   DateTime?                            @updatedAt
}

model User {
  id                                      String                     @id @default(uuid()) @postgresql.Uuid
  loggedInAs                              User?                      @relation("User_loggedInAs", fields: [loggedInAsId], references: [id])
  loggedInAsId                            String?                    @map("loggedInAs") @postgresql.Uuid
  authId                                  String?                    @unique
  email                                   String                     @unique @default("")
  firstName                               String                     @default("")
  middleInitial                           String                     @default("")
  lastName                                String                     @default("")
  roles                                   Role[]                     @relation("Role_users")
  sungageUser                             SungageUser?               @relation("SungageUser_user")
  lendingPartnerUser                      LendingPartnerUser?        @relation("LendingPartnerUser_user")
  installerApplicationUser                InstallerApplicationUser?  @relation("InstallerApplicationUser_user")
  signatures                              Signature[]                @relation("Signature_user")
  fieldHistories                          FieldHistory[]             @relation("FieldHistory_dataUpdatedBy")
  createdAt                               DateTime?                  @default(now())
  updatedAt                               DateTime?                  @updatedAt
  createdBy                               User?                      @relation("User_createdBy", fields: [createdById], references: [id])
  createdById                             String?                    @map("createdBy") @postgresql.Uuid
  updatedBy                               User?                      @relation("User_updatedBy", fields: [updatedById], references: [id])
  updatedById                             String?                    @map("updatedBy") @postgresql.Uuid
  from_Account_createdBy                  Account[]                  @relation("Account_createdBy")
  from_Account_updatedBy                  Account[]                  @relation("Account_updatedBy")
  from_Address_createdBy                  Address[]                  @relation("Address_createdBy")
  from_Address_updatedBy                  Address[]                  @relation("Address_updatedBy")
  from_Attachment_createdBy               Attachment[]               @relation("Attachment_createdBy")
  from_Attachment_updatedBy               Attachment[]               @relation("Attachment_updatedBy")
  from_User_loggedInAs                    User[]                     @relation("User_loggedInAs")
  from_User_createdBy                     User[]                     @relation("User_createdBy")
  from_User_updatedBy                     User[]                     @relation("User_updatedBy")
  from_BankingInfo_createdBy              BankingInfo[]              @relation("BankingInfo_createdBy")
  from_BankingInfo_updatedBy              BankingInfo[]              @relation("BankingInfo_updatedBy")
  from_Lender_createdBy                   Lender[]                   @relation("Lender_createdBy")
  from_Lender_updatedBy                   Lender[]                   @relation("Lender_updatedBy")
  from_LenderConfiguration_createdBy      LenderConfiguration[]      @relation("LenderConfiguration_createdBy")
  from_LenderConfiguration_updatedBy      LenderConfiguration[]      @relation("LenderConfiguration_updatedBy")
  from_Signature_createdBy                Signature[]                @relation("Signature_createdBy")
  from_Signature_updatedBy                Signature[]                @relation("Signature_updatedBy")
  from_SigningDocument_createdBy          SigningDocument[]          @relation("SigningDocument_createdBy")
  from_SigningDocument_updatedBy          SigningDocument[]          @relation("SigningDocument_updatedBy")
  from_LendingPartnerUser_createdBy       LendingPartnerUser[]       @relation("LendingPartnerUser_createdBy")
  from_LendingPartnerUser_updatedBy       LendingPartnerUser[]       @relation("LendingPartnerUser_updatedBy")
  from_Message_author                     Message[]                  @relation("Message_author")
  from_Transaction_createdBy              Transaction[]              @relation("Transaction_createdBy")
  from_Transaction_updatedBy              Transaction[]              @relation("Transaction_updatedBy")
  from_Disbursement_createdBy             Disbursement[]             @relation("Disbursement_createdBy")
  from_Disbursement_updatedBy             Disbursement[]             @relation("Disbursement_updatedBy")
  from_Agreement_createdBy                Agreement[]                @relation("Agreement_createdBy")
  from_Agreement_updatedBy                Agreement[]                @relation("Agreement_updatedBy")
  from_ApplicationSectionStatus_createdBy ApplicationSectionStatus[] @relation("ApplicationSectionStatus_createdBy")
  from_ApplicationSectionStatus_updatedBy ApplicationSectionStatus[] @relation("ApplicationSectionStatus_updatedBy")
  from_ApplicationCompany_createdBy       ApplicationCompany[]       @relation("ApplicationCompany_createdBy")
  from_ApplicationCompany_updatedBy       ApplicationCompany[]       @relation("ApplicationCompany_updatedBy")
  from_CreditAuthorizationForm_createdBy  CreditAuthorizationForm[]  @relation("CreditAuthorizationForm_createdBy")
  from_CreditAuthorizationForm_updatedBy  CreditAuthorizationForm[]  @relation("CreditAuthorizationForm_updatedBy")
  from_FinancialStatement_createdBy       FinancialStatement[]       @relation("FinancialStatement_createdBy")
  from_FinancialStatement_updatedBy       FinancialStatement[]       @relation("FinancialStatement_updatedBy")
  from_InstallerApplication_createdBy     InstallerApplication[]     @relation("InstallerApplication_createdBy")
  from_InstallerApplication_updatedBy     InstallerApplication[]     @relation("InstallerApplication_updatedBy")
  from_InstallerApplicationUser_createdBy InstallerApplicationUser[] @relation("InstallerApplicationUser_createdBy")
  from_InstallerApplicationUser_updatedBy InstallerApplicationUser[] @relation("InstallerApplicationUser_updatedBy")
  from_Insurance_createdBy                Insurance[]                @relation("Insurance_createdBy")
  from_Insurance_updatedBy                Insurance[]                @relation("Insurance_updatedBy")
  from_StateLicense_createdBy             StateLicense[]             @relation("StateLicense_createdBy")
  from_StateLicense_updatedBy             StateLicense[]             @relation("StateLicense_updatedBy")
  from_ConfigStateLicense_createdBy       ConfigStateLicense[]       @relation("ConfigStateLicense_createdBy")
  from_ConfigStateLicense_updatedBy       ConfigStateLicense[]       @relation("ConfigStateLicense_updatedBy")
  from_PersonalCreditCheck_createdBy      PersonalCreditCheck[]      @relation("PersonalCreditCheck_createdBy")
  from_PersonalCreditCheck_updatedBy      PersonalCreditCheck[]      @relation("PersonalCreditCheck_updatedBy")

  @@index([loggedInAsId])
  @@index([createdById])
  @@index([updatedById])
}

model ApplicationString {
  id                    String    @id @default(uuid()) @postgresql.Uuid
  key                   String    @unique @default("")
  applicationStringType String?   @default("ApplicationStrings")
  value                 String    @default("")
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @updatedAt
}

model BankingInfo {
  id                         String                      @id @default(uuid()) @postgresql.Uuid
  bankName                   String                      @default("")
  routingNumber              String                      @default("")
  accountNumber              String                      @default("")
  accountType                BankingInfoAccountTypeType?
  createdAt                  DateTime?                   @default(now())
  updatedAt                  DateTime?                   @updatedAt
  createdBy                  User?                       @relation("BankingInfo_createdBy", fields: [createdById], references: [id])
  createdById                String?                     @map("createdBy") @postgresql.Uuid
  updatedBy                  User?                       @relation("BankingInfo_updatedBy", fields: [updatedById], references: [id])
  updatedById                String?                     @map("updatedBy") @postgresql.Uuid
  from_Agreement_bankAccount Agreement[]                 @relation("Agreement_bankAccount")

  @@index([createdById])
  @@index([updatedById])
}

model ModelPermission {
  id      String            @id @default(uuid()) @postgresql.Uuid
  listKey String            @default("")
  role    Role?             @relation("ModelPermission_role", fields: [roleId], references: [id])
  roleId  String?           @map("roleId") @postgresql.Uuid
  fields  FieldPermission[] @relation("FieldPermission_model")
  create  Boolean           @default(false)
  read    Boolean           @default(false)
  update  Boolean           @default(false)
  delete  Boolean           @default(false)

  @@index([listKey])
  @@index([roleId])
}

model FieldPermission {
  id       String           @id @default(uuid()) @postgresql.Uuid
  fieldKey String           @default("")
  model    ModelPermission? @relation("FieldPermission_model", fields: [modelId], references: [id])
  modelId  String?          @map("modelPermissionId") @postgresql.Uuid
  create   Boolean          @default(false)
  read     Boolean          @default(false)
  update   Boolean          @default(false)

  @@index([fieldKey])
  @@index([modelId])
}

model Lender {
  id                     String               @id @default(uuid()) @postgresql.Uuid
  name                   String               @default("")
  lenderConfiguration    LenderConfiguration? @relation("Lender_lenderConfiguration", fields: [lenderConfigurationId], references: [id])
  lenderConfigurationId  String?              @unique @map("lenderConfiguration") @postgresql.Uuid
  disbursements          Disbursement[]       @relation("Disbursement_lender")
  lendingPartnerUser     LendingPartnerUser[] @relation("LendingPartnerUser_lender")
  transactions           Transaction[]        @relation("Transaction_lender")
  createdAt              DateTime?            @default(now())
  updatedAt              DateTime?            @updatedAt
  createdBy              User?                @relation("Lender_createdBy", fields: [createdById], references: [id])
  createdById            String?              @map("createdBy") @postgresql.Uuid
  updatedBy              User?                @relation("Lender_updatedBy", fields: [updatedById], references: [id])
  updatedById            String?              @map("updatedBy") @postgresql.Uuid
  from_Attachment_lender Attachment[]         @relation("Attachment_lender")

  @@index([createdById])
  @@index([updatedById])
}

model LenderConfiguration {
  id                                        String    @id @default(uuid()) @postgresql.Uuid
  lender                                    Lender?   @relation("Lender_lenderConfiguration")
  genericLenderAttachmentMaxFilesizeInBytes Int?
  createdAt                                 DateTime? @default(now())
  updatedAt                                 DateTime? @updatedAt
  createdBy                                 User?     @relation("LenderConfiguration_createdBy", fields: [createdById], references: [id])
  createdById                               String?   @map("createdBy") @postgresql.Uuid
  updatedBy                                 User?     @relation("LenderConfiguration_updatedBy", fields: [updatedById], references: [id])
  updatedById                               String?   @map("updatedBy") @postgresql.Uuid

  @@index([createdById])
  @@index([updatedById])
}

model Permission {
  id    String @id @default(uuid()) @postgresql.Uuid
  value String @unique @default("")
  roles Role[] @relation("Permission_roles")
}

model Role {
  id               String            @id @default(uuid()) @postgresql.Uuid
  name             String            @unique @default("")
  permissions      Permission[]      @relation("Permission_roles")
  modelPermissions ModelPermission[] @relation("ModelPermission_role")
  users            User[]            @relation("Role_users")
}

model Signature {
  id                              String               @id @default(uuid()) @postgresql.Uuid
  user                            User?                @relation("Signature_user", fields: [userId], references: [id])
  userId                          String?              @map("user") @postgresql.Uuid
  signedAt                        DateTime?
  viewedAt                        DateTime?
  ipAddress                       String               @default("")
  userIdString                    String               @default("")
  status                          SignatureStatusType? @default(Sent)
  recipientId                     String               @default("")
  createdAt                       DateTime?            @default(now())
  updatedAt                       DateTime?            @updatedAt
  createdBy                       User?                @relation("Signature_createdBy", fields: [createdById], references: [id])
  createdById                     String?              @map("createdBy") @postgresql.Uuid
  updatedBy                       User?                @relation("Signature_updatedBy", fields: [updatedById], references: [id])
  updatedById                     String?              @map("updatedBy") @postgresql.Uuid
  from_SigningDocument_signature1 SigningDocument[]    @relation("SigningDocument_signature1")
  from_SigningDocument_signature2 SigningDocument[]    @relation("SigningDocument_signature2")

  @@index([userId])
  @@index([createdById])
  @@index([updatedById])
}

model SigningDocument {
  id                                           String                          @id @default(uuid()) @postgresql.Uuid
  certificate                                  Attachment?                     @relation("SigningDocument_certificate", fields: [certificateId], references: [id])
  certificateId                                String?                         @map("certificate") @postgresql.Uuid
  documentPdf                                  Attachment?                     @relation("SigningDocument_documentPdf", fields: [documentPdfId], references: [id])
  documentPdfId                                String?                         @map("documentPdf") @postgresql.Uuid
  signature1                                   Signature?                      @relation("SigningDocument_signature1", fields: [signature1Id], references: [id])
  signature1Id                                 String?                         @map("signature1") @postgresql.Uuid
  signature2                                   Signature?                      @relation("SigningDocument_signature2", fields: [signature2Id], references: [id])
  signature2Id                                 String?                         @map("signature2") @postgresql.Uuid
  completedAt                                  DateTime?
  envelopeId                                   String                          @default("")
  status                                       SigningDocumentStatusType?      @default(Sent)
  documentType                                 SigningDocumentDocumentTypeType @default(other)
  createdAt                                    DateTime?                       @default(now())
  updatedAt                                    DateTime?                       @updatedAt
  createdBy                                    User?                           @relation("SigningDocument_createdBy", fields: [createdById], references: [id])
  createdById                                  String?                         @map("createdBy") @postgresql.Uuid
  updatedBy                                    User?                           @relation("SigningDocument_updatedBy", fields: [updatedById], references: [id])
  updatedById                                  String?                         @map("updatedBy") @postgresql.Uuid
  from_Agreement_signingDocument               Agreement[]                     @relation("Agreement_signingDocument")
  from_CreditAuthorizationForm_signingDocument CreditAuthorizationForm[]       @relation("CreditAuthorizationForm_signingDocument")
  from_Insurance_signingDocument               Insurance[]                     @relation("Insurance_signingDocument")

  @@index([certificateId])
  @@index([documentPdfId])
  @@index([signature1Id])
  @@index([signature2Id])
  @@index([createdById])
  @@index([updatedById])
}

model SungageUser {
  id                                             String                 @id @default(uuid()) @postgresql.Uuid
  user                                           User?                  @relation("SungageUser_user", fields: [userId], references: [id])
  userId                                         String?                @unique @map("userId") @postgresql.Uuid
  chatUserId                                     String?                @unique
  createdAt                                      DateTime?              @default(now())
  updatedAt                                      DateTime?              @updatedAt
  from_InstallerApplication_applicationProcessor InstallerApplication[] @relation("InstallerApplication_applicationProcessor")
  from_InstallerApplication_applicationReviewer  InstallerApplication[] @relation("InstallerApplication_applicationReviewer")
}

model LendingPartnerUser {
  id                                   String         @id @default(uuid()) @postgresql.Uuid
  user                                 User?          @relation("LendingPartnerUser_user", fields: [userId], references: [id])
  userId                               String?        @unique @map("user") @postgresql.Uuid
  lender                               Lender?        @relation("LendingPartnerUser_lender", fields: [lenderId], references: [id])
  lenderId                             String?        @map("lender") @postgresql.Uuid
  createdAt                            DateTime?      @default(now())
  updatedAt                            DateTime?      @updatedAt
  createdBy                            User?          @relation("LendingPartnerUser_createdBy", fields: [createdById], references: [id])
  createdById                          String?        @map("createdBy") @postgresql.Uuid
  updatedBy                            User?          @relation("LendingPartnerUser_updatedBy", fields: [updatedById], references: [id])
  updatedById                          String?        @map("updatedBy") @postgresql.Uuid
  from_Transaction_lockedBy            Transaction[]  @relation("Transaction_lockedBy")
  from_Transaction_reviewedBy          Transaction[]  @relation("Transaction_reviewedBy")
  from_Disbursement_fundingCompletedBy Disbursement[] @relation("Disbursement_fundingCompletedBy")
  from_Disbursement_reviewedBy         Disbursement[] @relation("Disbursement_reviewedBy")

  @@index([lenderId])
  @@index([createdById])
  @@index([updatedById])
}

model FieldHistory {
  id              String    @id @default(uuid()) @postgresql.Uuid
  dataUpdatedAt   DateTime? @default(now())
  dataUpdatedBy   User?     @relation("FieldHistory_dataUpdatedBy", fields: [dataUpdatedById], references: [id])
  dataUpdatedById String?   @map("updatedById") @postgresql.Uuid
  modelName       String    @default("")
  fieldName       String    @default("")
  itemId          String    @default("")
  action          String?
  oldValue        String    @default("")
  newValue        String    @default("")

  @@index([dataUpdatedById])
  @@index([itemId])
}

model Message {
  id              String       @id @default(uuid()) @postgresql.Uuid
  parentObjectId  String       @default("")
  text            String       @default("")
  attachments     Attachment[] @relation("Attachment_message")
  isPrivate       Boolean      @default(false)
  parentMessage   Message?     @relation("Message_parentMessage", fields: [parentMessageId], references: [id])
  parentMessageId String?      @map("parentMessage") @postgresql.Uuid
  childMessages   Message[]    @relation("Message_parentMessage")
  author          User?        @relation("Message_author", fields: [authorId], references: [id])
  authorId        String?      @map("author") @postgresql.Uuid
  createdAt       DateTime?    @default(now())
  updatedAt       DateTime?    @updatedAt

  @@index([parentMessageId])
  @@index([authorId])
}

model Transaction {
  id                       String                               @id @default(uuid()) @postgresql.Uuid
  borrowerName             String                               @default("")
  dateSent                 DateTime?
  disbursementSchedule     TransactionDisbursementScheduleType?
  fundingAmount            Decimal?                             @default("0.00") @postgresql.Decimal(18, 2)
  fundingStage             TransactionFundingStageType?
  lenderApplicationId      String?
  invalidated              DateTime?
  loanNumber               String?
  lockedBy                 LendingPartnerUser?                  @relation("Transaction_lockedBy", fields: [lockedById], references: [id])
  lockedById               String?                              @map("lockedBy") @postgresql.Uuid
  status                   TransactionStatusType                @default(Not_Reviewed)
  submittedForDisbursement DateTime?
  sungageApplicationId     String                               @default("")
  termLoanAmount           Decimal                              @default("0.00") @postgresql.Decimal(18, 2)
  disbursement             Disbursement?                        @relation("Transaction_disbursement", fields: [disbursementId], references: [id])
  disbursementId           String?                              @map("disbursement") @postgresql.Uuid
  installerFee             Decimal?                             @postgresql.Decimal(18, 2)
  lender                   Lender?                              @relation("Transaction_lender", fields: [lenderId], references: [id])
  lenderId                 String?                              @map("lender") @postgresql.Uuid
  loanType                 TransactionLoanTypeType?
  reviewedBy               LendingPartnerUser?                  @relation("Transaction_reviewedBy", fields: [reviewedById], references: [id])
  reviewedById             String?                              @map("reviewedBy") @postgresql.Uuid
  rejectionReason          String?
  isSold                   Boolean                              @default(false)
  externalId               String?
  buyDownFee               Decimal?                             @postgresql.Decimal(18, 2)
  contractFee              Decimal?                             @postgresql.Decimal(18, 2)
  deferredFee              Decimal?                             @postgresql.Decimal(18, 2)
  deferredLoanAmount       Decimal?                             @postgresql.Decimal(18, 2)
  deferredMaturity         DateTime?
  downPayment              Decimal?                             @postgresql.Decimal(18, 2)
  installConfirmationDate  DateTime?
  netFirstFunding          Decimal?                             @postgresql.Decimal(18, 2)
  originalApplicationDate  DateTime?
  roofBatteryFee           Decimal?                             @postgresql.Decimal(18, 2)
  termLoanPaymentAmount    Decimal?                             @postgresql.Decimal(18, 2)
  totalSystemCost          Decimal?                             @postgresql.Decimal(18, 2)
  firstFundingDate         DateTime?
  utilityCompany           String?
  createdAt                DateTime?                            @default(now())
  updatedAt                DateTime?                            @updatedAt
  createdBy                User?                                @relation("Transaction_createdBy", fields: [createdById], references: [id])
  createdById              String?                              @map("createdBy") @postgresql.Uuid
  updatedBy                User?                                @relation("Transaction_updatedBy", fields: [updatedById], references: [id])
  updatedById              String?                              @map("updatedBy") @postgresql.Uuid

  @@index([lockedById])
  @@index([disbursementId])
  @@index([lenderId])
  @@index([reviewedById])
  @@index([createdById])
  @@index([updatedById])
}

model Disbursement {
  id                   String                 @id @default(uuid()) @postgresql.Uuid
  attachments          Attachment[]           @relation("Attachment_disbursement")
  confirmedBy          String                 @default("")
  lender               Lender?                @relation("Disbursement_lender", fields: [lenderId], references: [id])
  lenderId             String?                @map("lender") @postgresql.Uuid
  fundingCompletedBy   LendingPartnerUser?    @relation("Disbursement_fundingCompletedBy", fields: [fundingCompletedById], references: [id])
  fundingCompletedById String?                @map("fundingCompletedBy") @postgresql.Uuid
  reviewedBy           LendingPartnerUser?    @relation("Disbursement_reviewedBy", fields: [reviewedById], references: [id])
  reviewedById         String?                @map("reviewedBy") @postgresql.Uuid
  status               DisbursementStatusType @default(Draft)
  submittedDate        DateTime?
  transactions         Transaction[]          @relation("Transaction_disbursement")
  createdAt            DateTime?              @default(now())
  updatedAt            DateTime?              @updatedAt
  createdBy            User?                  @relation("Disbursement_createdBy", fields: [createdById], references: [id])
  createdById          String?                @map("createdBy") @postgresql.Uuid
  updatedBy            User?                  @relation("Disbursement_updatedBy", fields: [updatedById], references: [id])
  updatedById          String?                @map("updatedBy") @postgresql.Uuid

  @@index([lenderId])
  @@index([fundingCompletedById])
  @@index([reviewedById])
  @@index([createdById])
  @@index([updatedById])
}

model Agreement {
  id                     String                @id @default(uuid()) @postgresql.Uuid
  type                   AgreementTypeType
  version                AgreementVersionType
  installerApplication   InstallerApplication? @relation("Agreement_installerApplication", fields: [installerApplicationId], references: [id])
  installerApplicationId String?               @unique @map("installerApplication") @postgresql.Uuid
  bankAccount            BankingInfo?          @relation("Agreement_bankAccount", fields: [bankAccountId], references: [id])
  bankAccountId          String?               @map("bankAccount") @postgresql.Uuid
  noticesAddress         Address?              @relation("Agreement_noticesAddress", fields: [noticesAddressId], references: [id])
  noticesAddressId       String?               @map("noticesAddress") @postgresql.Uuid
  noticesEmail           String                @default("")
  signingDocument        SigningDocument?      @relation("Agreement_signingDocument", fields: [signingDocumentId], references: [id])
  signingDocumentId      String?               @map("signingDocument") @postgresql.Uuid
  recipientName          String                @default("")
  recipientTitle         String                @default("")
  invalidatedAt          DateTime?
  createdAt              DateTime?             @default(now())
  updatedAt              DateTime?             @updatedAt
  createdBy              User?                 @relation("Agreement_createdBy", fields: [createdById], references: [id])
  createdById            String?               @map("createdBy") @postgresql.Uuid
  updatedBy              User?                 @relation("Agreement_updatedBy", fields: [updatedById], references: [id])
  updatedById            String?               @map("updatedBy") @postgresql.Uuid

  @@index([bankAccountId])
  @@index([noticesAddressId])
  @@index([signingDocumentId])
  @@index([createdById])
  @@index([updatedById])
}

model ApplicationSectionStatus {
  id                                String                                                @id @default(uuid()) @postgresql.Uuid
  installerApplication              InstallerApplication?                                 @relation("ApplicationSectionStatus_installerApplication", fields: [installerApplicationId], references: [id])
  installerApplicationId            String?                                               @unique @map("installerApplication") @postgresql.Uuid
  companyProfileReview              ApplicationSectionStatusCompanyProfileReviewType      @default(None)
  ownershipReview                   ApplicationSectionStatusOwnershipReviewType           @default(None)
  keyPersonnelReview                ApplicationSectionStatusKeyPersonnelReviewType        @default(None)
  statesLicensesReview              ApplicationSectionStatusStatesLicensesReviewType      @default(None)
  insurancesReview                  ApplicationSectionStatusInsurancesReviewType          @default(None)
  creditAuthorizationReview         ApplicationSectionStatusCreditAuthorizationReviewType @default(None)
  financialsReview                  ApplicationSectionStatusFinancialsReviewType          @default(None)
  installerAgreementReview          ApplicationSectionStatusInstallerAgreementReviewType  @default(None)
  sellerAgreementReview             ApplicationSectionStatusSellerAgreementReviewType     @default(None)
  directPayReview                   ApplicationSectionStatusDirectPayReviewType           @default(None)
  accountConnectionReview           ApplicationSectionStatusAccountConnectionReviewType   @default(None)
  submitApplicationReview           ApplicationSectionStatusSubmitApplicationReviewType   @default(None)
  companyProfileKickbackNotes       String                                                @default("")
  ownershipKickbackNotes            String                                                @default("")
  keyPersonnelKickbackNotes         String                                                @default("")
  statesLicensesKickbackNotes       String                                                @default("")
  insurancesKickbackNotes           String                                                @default("")
  credithAuthorizationKickbackNotes String                                                @default("")
  financialsKickbackNotes           String                                                @default("")
  installerAgreementKickbackNotes   String                                                @default("")
  directPayKickbackNotes            String                                                @default("")
  accountConnectionKickbackNotes    String                                                @default("")
  createdAt                         DateTime?                                             @default(now())
  updatedAt                         DateTime?                                             @updatedAt
  createdBy                         User?                                                 @relation("ApplicationSectionStatus_createdBy", fields: [createdById], references: [id])
  createdById                       String?                                               @map("createdBy") @postgresql.Uuid
  updatedBy                         User?                                                 @relation("ApplicationSectionStatus_updatedBy", fields: [updatedById], references: [id])
  updatedById                       String?                                               @map("updatedBy") @postgresql.Uuid

  @@index([createdById])
  @@index([updatedById])
}

model ApplicationCompany {
  id                       String                                  @id @default(uuid()) @postgresql.Uuid
  legalName                String                                  @default("")
  installerApplication     InstallerApplication?                   @relation("ApplicationCompany_installerApplication", fields: [installerApplicationId], references: [id])
  installerApplicationId   String?                                 @unique @map("installerApplication") @postgresql.Uuid
  applicationUsers         InstallerApplicationUser[]              @relation("InstallerApplicationUser_applicationCompany")
  address                  Address?                                @relation("ApplicationCompany_address", fields: [addressId], references: [id])
  addressId                String?                                 @map("address") @postgresql.Uuid
  averageReviewScore       String                                  @default("")
  businessPhoneNumber      String                                  @default("")
  dbaName                  String                                  @default("")
  negativeReviews          String                                  @default("")
  numberOfInstallsLastYear Int?
  numberOfReviews          ApplicationCompanyNumberOfReviewType?
  ohmRatingLTM             Int?
  timeInBusiness           ApplicationCompanyTimeInBusinessType?
  tin                      String                                  @default("")
  volumePotential          Int?
  website                  String                                  @default("")
  yearOfFormation          String                                  @default("")
  stateOfFormation         ApplicationCompanyStateOfFormationType?
  createdAt                DateTime?                               @default(now())
  updatedAt                DateTime?                               @updatedAt
  createdBy                User?                                   @relation("ApplicationCompany_createdBy", fields: [createdById], references: [id])
  createdById              String?                                 @map("createdBy") @postgresql.Uuid
  updatedBy                User?                                   @relation("ApplicationCompany_updatedBy", fields: [updatedById], references: [id])
  updatedById              String?                                 @map("updatedBy") @postgresql.Uuid

  @@index([addressId])
  @@index([createdById])
  @@index([updatedById])
}

model CreditAuthorizationForm {
  id                     String                             @id @default(uuid()) @postgresql.Uuid
  installerApplication   InstallerApplication?              @relation("CreditAuthorizationForm_installerApplication", fields: [installerApplicationId], references: [id])
  installerApplicationId String?                            @map("installerApplication") @postgresql.Uuid
  homeAddress            Address?                           @relation("CreditAuthorizationForm_homeAddress", fields: [homeAddressId], references: [id])
  homeAddressId          String?                            @map("homeAddress") @postgresql.Uuid
  signingDocument        SigningDocument?                   @relation("CreditAuthorizationForm_signingDocument", fields: [signingDocumentId], references: [id])
  signingDocumentId      String?                            @map("signingDocument") @postgresql.Uuid
  owner                  InstallerApplicationUser?          @relation("CreditAuthorizationForm_owner", fields: [ownerId], references: [id])
  ownerId                String?                            @map("owner") @postgresql.Uuid
  dob                    DateTime?                          @postgresql.Date
  lastSentDate           DateTime?
  originalSentDate       DateTime?
  status                 CreditAuthorizationFormStatusType?
  invalidatedAt          DateTime?
  createdAt              DateTime?                          @default(now())
  updatedAt              DateTime?                          @updatedAt
  createdBy              User?                              @relation("CreditAuthorizationForm_createdBy", fields: [createdById], references: [id])
  createdById            String?                            @map("createdBy") @postgresql.Uuid
  updatedBy              User?                              @relation("CreditAuthorizationForm_updatedBy", fields: [updatedById], references: [id])
  updatedById            String?                            @map("updatedBy") @postgresql.Uuid

  @@index([installerApplicationId])
  @@index([homeAddressId])
  @@index([signingDocumentId])
  @@index([ownerId])
  @@index([createdById])
  @@index([updatedById])
}

model FinancialStatement {
  id                     String                               @id @default(uuid()) @postgresql.Uuid
  installerApplication   InstallerApplication?                @relation("FinancialStatement_installerApplication", fields: [installerApplicationId], references: [id])
  installerApplicationId String?                              @map("installerApplication") @postgresql.Uuid
  attachments            Attachment[]                         @relation("Attachment_financialStatement")
  statementType          FinancialStatementStatementTypeType?
  invalidatedAt          DateTime?
  createdAt              DateTime?                            @default(now())
  updatedAt              DateTime?                            @updatedAt
  createdBy              User?                                @relation("FinancialStatement_createdBy", fields: [createdById], references: [id])
  createdById            String?                              @map("createdBy") @postgresql.Uuid
  updatedBy              User?                                @relation("FinancialStatement_updatedBy", fields: [updatedById], references: [id])
  updatedById            String?                              @map("updatedBy") @postgresql.Uuid

  @@index([installerApplicationId])
  @@index([createdById])
  @@index([updatedById])
}

model InstallerApplication {
  id                                String                                               @id @default(uuid()) @postgresql.Uuid
  account                           Account?                                             @relation("InstallerApplication_account", fields: [accountId], references: [id])
  accountId                         String?                                              @map("account") @postgresql.Uuid
  applicationSectionStatus          ApplicationSectionStatus?                            @relation("ApplicationSectionStatus_installerApplication")
  applicationCompany                ApplicationCompany?                                  @relation("ApplicationCompany_installerApplication")
  requestor                         InstallerApplicationUser?                            @relation("InstallerApplication_requestor", fields: [requestorId], references: [id])
  requestorId                       String?                                              @map("requestor") @postgresql.Uuid
  ceo                               InstallerApplicationUser?                            @relation("InstallerApplication_ceo", fields: [ceoId], references: [id])
  ceoId                             String?                                              @map("ceo") @postgresql.Uuid
  cfo                               InstallerApplicationUser?                            @relation("InstallerApplication_cfo", fields: [cfoId], references: [id])
  cfoId                             String?                                              @map("cfo") @postgresql.Uuid
  coo                               InstallerApplicationUser?                            @relation("InstallerApplication_coo", fields: [cooId], references: [id])
  cooId                             String?                                              @map("coo") @postgresql.Uuid
  salesManager                      InstallerApplicationUser?                            @relation("InstallerApplication_salesManager", fields: [salesManagerId], references: [id])
  salesManagerId                    String?                                              @map("salesManager") @postgresql.Uuid
  operationsManager                 InstallerApplicationUser?                            @relation("InstallerApplication_operationsManager", fields: [operationsManagerId], references: [id])
  operationsManagerId               String?                                              @map("operationsManager") @postgresql.Uuid
  creditAuthorizationForms          CreditAuthorizationForm[]                            @relation("CreditAuthorizationForm_installerApplication")
  financialStatements               FinancialStatement[]                                 @relation("FinancialStatement_installerApplication")
  insurances                        Insurance[]                                          @relation("Insurance_installerApplication")
  agreement                         Agreement?                                           @relation("Agreement_installerApplication")
  attachments                       Attachment[]                                         @relation("Attachment_installerApplication")
  stateLicenses                     StateLicense[]                                       @relation("StateLicense_installerApplication")
  applicationProcessor              SungageUser?                                         @relation("InstallerApplication_applicationProcessor", fields: [applicationProcessorId], references: [id])
  applicationProcessorId            String?                                              @map("applicationProcessor") @postgresql.Uuid
  applicationReviewer               SungageUser?                                         @relation("InstallerApplication_applicationReviewer", fields: [applicationReviewerId], references: [id])
  applicationReviewerId             String?                                              @map("applicationReviewer") @postgresql.Uuid
  applicationPriority               InstallerApplicationApplicationPriorityType?
  applicationReviewStatus           InstallerApplicationApplicationReviewStatusType?
  applicationSubmitted              DateTime?
  requiresCaf                       Boolean                                              @default(false)
  insuranceRequirementsMet          InstallerApplicationInsuranceRequirementsMetType?
  ownerConfirmedLegalSigners        DateTime?
  ownersConfirmed                   DateTime?
  finalAuthorizationCheckbox        Boolean                                              @default(false)
  finalAuthorizationIpAddress       String                                               @default("")
  finalAuthorizationName            String                                               @default("")
  hasSubContractors                 InstallerApplicationHasSubContractorType?
  isLocked                          Boolean                                              @default(false)
  isWorkersCompRequired             InstallerApplicationIsWorkersCompRequiredType?
  nameOfSubContractors              String                                               @default("")
  nameOfRoofContractors             String                                               @default("")
  reapplicationType                 InstallerApplicationReapplicationTypeType?
  portalKey                         String                                               @unique @default("")
  rejectionReason                   String                                               @default("")
  requiresMoreRecentTaxReturns      Boolean                                              @default(false)
  externalId                        String?
  dateOfFormationFromSOSLicense     DateTime?
  businessFilingChecksCompleted     DateTime?
  phoneVerificationNumberCompleted  DateTime?
  websiteDomainChecksCompleted      DateTime?
  functioningWebsite                InstallerApplicationFunctioningWebsiteType?
  financialsSentToReview            DateTime?
  financialsReviewDecision          InstallerApplicationFinancialsReviewDecisionType?
  financialsDocumentsVerified       DateTime?
  financialsReviewComplete          DateTime?
  abilityToPullBiq                  InstallerApplicationAbilityToPullBiqType?
  abilityToScoreBiq                 InstallerApplicationAbilityToScoreBiqType?
  financialStabilityRiskScore       Int?
  intelliscore                      Int?
  daysBeyondTerms                   Int?
  commercialCreditCheckCompleted    DateTime?
  ofacCheckCompleted                DateTime?
  legalActionSearchComplete         DateTime?
  sungageAssociationSearchNotes     String                                               @default("")
  sungageAssociationSearchCompleted DateTime?
  contractTwoYearWarrantyVerified   DateTime?
  minimumBusinessAgeMet             InstallerApplicationMinimumBusinessAgeMetType?
  dateScorecardCompleted            DateTime?
  provisionalScorecardException     DateTime?
  totalProvisionalScore             Int?
  dateFlaggedForHighRisk            DateTime?
  highRiskNotes                     String                                               @default("")
  overallReputationSummary          InstallerApplicationOverallReputationSummaryType?
  hasMoreThanFiveOnlineReviews      InstallerApplicationHasMoreThanFiveOnlineReviewType?
  yelpReviews                       String                                               @default("")
  BBBReviews                        String                                               @default("")
  googleReviews                     String                                               @default("")
  solarReviews                      String                                               @default("")
  otherReviews                      String                                               @default("")
  onlineReviewsComplete             DateTime?
  applicationDecision               InstallerApplicationApplicationDecisionType?
  applicationDecisionDate           DateTime?
  primaryDenialReason               InstallerApplicationPrimaryDenialReasonType?
  currentOperatingStates            Json                                                 @default("[]")
  isWaitingOnIRCDiscussion          Boolean                                              @default(false)
  isPendingMoreInformation          Boolean                                              @default(false)
  applicationStalled                DateTime?
  returnedToApplicantForRevision    DateTime?
  applicationResubmitted            DateTime?
  createdAt                         DateTime?                                            @default(now())
  updatedAt                         DateTime?                                            @updatedAt
  createdBy                         User?                                                @relation("InstallerApplication_createdBy", fields: [createdById], references: [id])
  createdById                       String?                                              @map("createdBy") @postgresql.Uuid
  updatedBy                         User?                                                @relation("InstallerApplication_updatedBy", fields: [updatedById], references: [id])
  updatedById                       String?                                              @map("updatedBy") @postgresql.Uuid

  @@index([accountId])
  @@index([requestorId])
  @@index([ceoId])
  @@index([cfoId])
  @@index([cooId])
  @@index([salesManagerId])
  @@index([operationsManagerId])
  @@index([applicationProcessorId])
  @@index([applicationReviewerId])
  @@index([createdById])
  @@index([updatedById])
}

model InstallerApplicationUser {
  id                                          String                                              @id @default(uuid()) @postgresql.Uuid
  applicationCompany                          ApplicationCompany?                                 @relation("InstallerApplicationUser_applicationCompany", fields: [applicationCompanyId], references: [id])
  applicationCompanyId                        String?                                             @map("applicationCompany") @postgresql.Uuid
  user                                        User?                                               @relation("InstallerApplicationUser_user", fields: [userId], references: [id])
  userId                                      String?                                             @unique @map("user") @postgresql.Uuid
  creditAuthorizationForms                    CreditAuthorizationForm[]                           @relation("CreditAuthorizationForm_owner")
  attachments                                 Attachment[]                                        @relation("Attachment_installerApplicationUser")
  personalCreditChecks                        PersonalCreditCheck[]                               @relation("PersonalCreditCheck_installerApplicationUser")
  isLegalSigner                               Boolean                                             @default(false)
  isOwner                                     Boolean                                             @default(false)
  percentageOwned                             Decimal?                                            @postgresql.Decimal(5, 2)
  phone                                       String                                              @default("")
  preferredContactMethod                      InstallerApplicationUserPreferredContactMethodType?
  title                                       String                                              @default("")
  backgroundCheckComplete                     DateTime?
  backgroundCheckNotPossible                  DateTime?
  createdAt                                   DateTime?                                           @default(now())
  updatedAt                                   DateTime?                                           @updatedAt
  createdBy                                   User?                                               @relation("InstallerApplicationUser_createdBy", fields: [createdById], references: [id])
  createdById                                 String?                                             @map("createdBy") @postgresql.Uuid
  updatedBy                                   User?                                               @relation("InstallerApplicationUser_updatedBy", fields: [updatedById], references: [id])
  updatedById                                 String?                                             @map("updatedBy") @postgresql.Uuid
  from_InstallerApplication_requestor         InstallerApplication[]                              @relation("InstallerApplication_requestor")
  from_InstallerApplication_ceo               InstallerApplication[]                              @relation("InstallerApplication_ceo")
  from_InstallerApplication_cfo               InstallerApplication[]                              @relation("InstallerApplication_cfo")
  from_InstallerApplication_coo               InstallerApplication[]                              @relation("InstallerApplication_coo")
  from_InstallerApplication_salesManager      InstallerApplication[]                              @relation("InstallerApplication_salesManager")
  from_InstallerApplication_operationsManager InstallerApplication[]                              @relation("InstallerApplication_operationsManager")

  @@index([applicationCompanyId])
  @@index([createdById])
  @@index([updatedById])
}

model Insurance {
  id                     String                         @id @default(uuid()) @postgresql.Uuid
  insuranceType          InsuranceInsuranceTypeType
  account                Account?                       @relation("Insurance_account", fields: [accountId], references: [id])
  accountId              String?                        @map("account") @postgresql.Uuid
  installerApplication   InstallerApplication?          @relation("Insurance_installerApplication", fields: [installerApplicationId], references: [id])
  installerApplicationId String?                        @map("installerApplication") @postgresql.Uuid
  attachments            Attachment[]                   @relation("Attachment_insurance")
  expirationDate         DateTime?                      @postgresql.Date
  isOverOneMillion       InsuranceIsOverOneMillionType?
  nameOfInsured          String                         @default("")
  policyNumber           String                         @default("")
  verified               DateTime?
  notes                  String                         @default("")
  signingDocument        SigningDocument?               @relation("Insurance_signingDocument", fields: [signingDocumentId], references: [id])
  signingDocumentId      String?                        @map("signingDocument") @postgresql.Uuid
  invalidatedAt          DateTime?
  createdAt              DateTime?                      @default(now())
  updatedAt              DateTime?                      @updatedAt
  createdBy              User?                          @relation("Insurance_createdBy", fields: [createdById], references: [id])
  createdById            String?                        @map("createdBy") @postgresql.Uuid
  updatedBy              User?                          @relation("Insurance_updatedBy", fields: [updatedById], references: [id])
  updatedById            String?                        @map("updatedBy") @postgresql.Uuid

  @@index([accountId])
  @@index([installerApplicationId])
  @@index([signingDocumentId])
  @@index([createdById])
  @@index([updatedById])
}

model StateLicense {
  id                     String                       @id @default(uuid()) @postgresql.Uuid
  account                Account?                     @relation("StateLicense_account", fields: [accountId], references: [id])
  accountId              String?                      @map("account") @postgresql.Uuid
  installerApplication   InstallerApplication?        @relation("StateLicense_installerApplication", fields: [installerApplicationId], references: [id])
  installerApplicationId String?                      @map("installerApplication") @postgresql.Uuid
  expirationDate         DateTime?                    @postgresql.Date
  licenseNumber          String                       @default("")
  licenseType            StateLicenseLicenseTypeType?
  nameOnLicense          String                       @default("")
  state                  StateLicenseStateType
  licenseNumberVerified  DateTime?
  attachments            Attachment[]                 @relation("Attachment_stateLicense")
  removedAt              DateTime?
  createdAt              DateTime?                    @default(now())
  updatedAt              DateTime?                    @updatedAt
  createdBy              User?                        @relation("StateLicense_createdBy", fields: [createdById], references: [id])
  createdById            String?                      @map("createdBy") @postgresql.Uuid
  updatedBy              User?                        @relation("StateLicense_updatedBy", fields: [updatedById], references: [id])
  updatedById            String?                      @map("updatedBy") @postgresql.Uuid

  @@index([accountId])
  @@index([installerApplicationId])
  @@index([createdById])
  @@index([updatedById])
}

model ConfigStateLicense {
  id                  String                      @id @default(uuid()) @postgresql.Uuid
  state               ConfigStateLicenseStateType
  numberRequired      Int?
  licenseOptions      Json                        @default("[]")
  externalDescription String                      @default("")
  isNonSungageState   Boolean                     @default(false)
  createdAt           DateTime?                   @default(now())
  updatedAt           DateTime?                   @updatedAt
  createdBy           User?                       @relation("ConfigStateLicense_createdBy", fields: [createdById], references: [id])
  createdById         String?                     @map("createdBy") @postgresql.Uuid
  updatedBy           User?                       @relation("ConfigStateLicense_updatedBy", fields: [updatedById], references: [id])
  updatedById         String?                     @map("updatedBy") @postgresql.Uuid

  @@index([createdById])
  @@index([updatedById])
}

model PersonalCreditCheck {
  id                         String                    @id @default(uuid()) @postgresql.Uuid
  installerApplicationUser   InstallerApplicationUser? @relation("PersonalCreditCheck_installerApplicationUser", fields: [installerApplicationUserId], references: [id])
  installerApplicationUserId String?                   @map("installerApplicationUser") @postgresql.Uuid
  attachments                Attachment[]              @relation("Attachment_personalCreditChecks")
  ficoScore                  String                    @default("")
  bankruptcyPlusScore        String                    @default("")
  personalCreditPulled       DateTime?
  creditResponseId           String                    @default("")
  createdAt                  DateTime?                 @default(now())
  updatedAt                  DateTime?                 @updatedAt
  createdBy                  User?                     @relation("PersonalCreditCheck_createdBy", fields: [createdById], references: [id])
  createdById                String?                   @map("createdBy") @postgresql.Uuid
  updatedBy                  User?                     @relation("PersonalCreditCheck_updatedBy", fields: [updatedById], references: [id])
  updatedById                String?                   @map("updatedBy") @postgresql.Uuid

  @@index([installerApplicationUserId])
  @@index([createdById])
  @@index([updatedById])
}

enum AccountTypeType {
  installer
  originator
  distributor
}

enum AccountSizeType {
  small
  medium
  large
  extra_large
  medium_rsm
  large_tam
}

enum AccountLeadSourceType {
  advertisement
  cold_call
  customer_referral
  customer_service_inbound
  employee_referral
  external_referral
  installer_referral
  other
  partner
  partner_non_installer
  public_relations
  sales_prospecting
  seminar_internal
  seminar_partner
  trade_show
  web
  website_installer_lead_form
  word_of_mouth
  open_solar_referral
  aurora_referral
  solo_referral
  soligent_referral
  sunobi_referral
  demand_iq_referral
  get_the_referral_referral
  bodhi_referral
  enerflo_referral
  wattmonk_referral
  trade_show_re_2022
}

enum AddressStateType {
  AK
  AL
  AR
  AS
  AZ
  CA
  CO
  CT
  DC
  DE
  FL
  GA
  GU
  HI
  IA
  ID
  IL
  IN
  KS
  KY
  LA
  MA
  MD
  ME
  MI
  MN
  MO
  MP
  MS
  MT
  NC
  ND
  NE
  NH
  NJ
  NM
  NV
  NY
  OH
  OK
  OR
  PA
  PR
  RI
  SC
  SD
  TN
  TX
  UT
  VA
  VI
  VT
  WA
  WI
  WV
  WY
}

enum AttachmentAttachmentTypeType {
  docusign_certificate
  financial_statement
  general_liability_insurance
  sample_contract
  signed_caf
  signed_installer_agreement
  signed_seller_agreement
  workers_comp_insurance
  funding_csv
  generic_lender_attachment
  license_type_attachment
  sos_registrations
  dba_registrations
  personal_credit_checks
  biq_profile
  personal_background_check
  business_background_check
  messaging_app_attachment
  other
}

enum AttachmentOptimizationJobJobTypeType {
  pdf_optimization
  png_optimization
  jpeg_optimization
  convert_to_pdf
  convert_to_pdf_with_opt
  convert_to_zip
}

enum AttachmentOptimizationJobStatusType {
  processing
  accepted
  rejected
  error
}

enum BankingInfoAccountTypeType {
  checking
  savings
}

enum SignatureStatusType {
  Sent
  Delivered
  Declined
  Completed
  Finish_Later
}

enum SigningDocumentStatusType {
  Sent
  Delivered
  Declined
  Completed
  Finish_Later
}

enum SigningDocumentDocumentTypeType {
  signed_caf
  signed_installer_agreement
  signed_seller_agreement
  workers_comp_insurance
  other
}

enum TransactionDisbursementScheduleType {
  Hundred_First_Payment
  Twenty_PTO
  Twenty_Inspection
  Twenty_Exception
  Twenty_Battery
}

enum TransactionFundingStageType {
  First
  Second_Disbursement_To_Installer
  Second_Disbursement_To_Sungage
}

enum TransactionStatusType {
  Approved
  Rejected
  Under_Review
  Not_Reviewed
}

enum TransactionLoanTypeType {
  Solar
  Solar_Plus
  Battery
}

enum DisbursementStatusType {
  Draft
  In_Final_Review
  Complete
}

enum AgreementTypeType {
  installer
  seller
}

enum AgreementVersionType {
  v1
  v2
  v3
}

enum ApplicationSectionStatusCompanyProfileReviewType {
  None
  Rejected
  Resubmitted
}

enum ApplicationSectionStatusOwnershipReviewType {
  None
  Rejected
  Resubmitted
}

enum ApplicationSectionStatusKeyPersonnelReviewType {
  None
  Rejected
  Resubmitted
}

enum ApplicationSectionStatusStatesLicensesReviewType {
  None
  Rejected
  Resubmitted
}

enum ApplicationSectionStatusInsurancesReviewType {
  None
  Rejected
  Resubmitted
}

enum ApplicationSectionStatusCreditAuthorizationReviewType {
  None
  Rejected
  Resubmitted
}

enum ApplicationSectionStatusFinancialsReviewType {
  None
  Rejected
  Resubmitted
}

enum ApplicationSectionStatusInstallerAgreementReviewType {
  None
  Rejected
  Resubmitted
}

enum ApplicationSectionStatusSellerAgreementReviewType {
  None
  Rejected
  Resubmitted
}

enum ApplicationSectionStatusDirectPayReviewType {
  None
  Rejected
  Resubmitted
}

enum ApplicationSectionStatusAccountConnectionReviewType {
  None
  Rejected
  Resubmitted
}

enum ApplicationSectionStatusSubmitApplicationReviewType {
  None
  Rejected
  Resubmitted
}

enum ApplicationCompanyNumberOfReviewType {
  one_five
  six_ten
  eleven_twenty
  twenty_one_forty
  forty_one_hundred
  one_hundred_plus
}

enum ApplicationCompanyTimeInBusinessType {
  less_than_one_year
  one_two_years
  two_three_years
  three_four_years
  four_five_years
  five_ten_years
  more_than_ten_years
}

enum ApplicationCompanyStateOfFormationType {
  AK
  AL
  AR
  AS
  AZ
  CA
  CO
  CT
  DC
  DE
  FL
  GA
  GU
  HI
  IA
  ID
  IL
  IN
  KS
  KY
  LA
  MA
  MD
  ME
  MI
  MN
  MO
  MP
  MS
  MT
  NC
  ND
  NE
  NH
  NJ
  NM
  NV
  NY
  OH
  OK
  OR
  PA
  PR
  RI
  SC
  SD
  TN
  TX
  UT
  VA
  VI
  VT
  WA
  WI
  WV
  WY
}

enum CreditAuthorizationFormStatusType {
  sent
  complete
}

enum FinancialStatementStatementTypeType {
  profit_and_loss
  balance_sheet
  bank_statement
  tax_return
}

enum InstallerApplicationApplicationPriorityType {
  high
  medium_high
  medium
  medium_low
  low
}

enum InstallerApplicationApplicationReviewStatusType {
  application_sent_not_received
  application_received_unassigned
  application_in_process
  pending_more_information
  application_resubmitted
  waiting_on_irc_discussion
  stalled
  pending_fail
  failed
  passed
  pending_pass
}

enum InstallerApplicationInsuranceRequirementsMetType {
  yes
  no
}

enum InstallerApplicationHasSubContractorType {
  yes
  no
}

enum InstallerApplicationIsWorkersCompRequiredType {
  yes
  no
}

enum InstallerApplicationReapplicationTypeType {
  clone
  new_application
}

enum InstallerApplicationFunctioningWebsiteType {
  yes
  no
}

enum InstallerApplicationFinancialsReviewDecisionType {
  pass
  fail
}

enum InstallerApplicationAbilityToPullBiqType {
  yes
  no
}

enum InstallerApplicationAbilityToScoreBiqType {
  yes
  no
}

enum InstallerApplicationMinimumBusinessAgeMetType {
  yes
  no
}

enum InstallerApplicationOverallReputationSummaryType {
  no_review_anywhere
  limited
  very_negative
  somewhat_negative
  both
  somewhat_positive
  very_positive
}

enum InstallerApplicationHasMoreThanFiveOnlineReviewType {
  yes
  no
}

enum InstallerApplicationApplicationDecisionType {
  pass
  pending_pass
  pending_fail
  fail
}

enum InstallerApplicationPrimaryDenialReasonType {
  background_check
  bankruptcy
  bankruptcy_plus_score
  commercial_credit
  customer_reviews_References
  fico
  financials
  license_issue
  marginal_denial
  online_research
  other
  slim_application
  suspected_fraud
  terminated_blacklisted_association
}

enum InstallerApplicationUserPreferredContactMethodType {
  phone
  email
}

enum InsuranceInsuranceTypeType {
  general_liability
  workers_comp
  workers_comp_exemption
}

enum InsuranceIsOverOneMillionType {
  yes
  no
}

enum StateLicenseLicenseTypeType {
  home_improvement_contractor
  general_building_contractor
  solar_contractor
  master_electrician
  electrical_contractor
  distributer_generation_installer
  renewable_energy_professional_license
  home_improvement_salesperson
  no_license_required
}

enum StateLicenseStateType {
  AL
  AR
  AZ
  CA
  CO
  CT
  DC
  DE
  FL
  GA
  HI
  IA
  ID
  IL
  KS
  KY
  LA
  MA
  MD
  ME
  MN
  MO
  MS
  MT
  NC
  NE
  NH
  NJ
  NM
  NV
  NY
  OH
  OK
  OR
  PA
  RI
  SC
  TN
  TX
  UT
  VA
  VT
  WA
  WV
  WY
}

enum ConfigStateLicenseStateType {
  AK
  AL
  AR
  AS
  AZ
  CA
  CO
  CT
  DC
  DE
  FL
  GA
  GU
  HI
  IA
  ID
  IL
  IN
  KS
  KY
  LA
  MA
  MD
  ME
  MI
  MN
  MO
  MP
  MS
  MT
  NC
  ND
  NE
  NH
  NJ
  NM
  NV
  NY
  OH
  OK
  OR
  PA
  PR
  RI
  SC
  SD
  TN
  TX
  UT
  VA
  VI
  VT
  WA
  WI
  WV
  WY
}
